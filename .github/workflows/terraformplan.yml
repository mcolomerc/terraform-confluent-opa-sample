# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on: 
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
 # verbosity setting for Terraform logs
 # TF_LOG: INFO
 TF_VAR_confluent_cloud_api_key: ${{ secrets.CCLOUD_API_KEY }}
 TF_VAR_confluent_cloud_api_secret: ${{ secrets.CCLOUD_API_SECRET }}
 TF_VAR_environment: env-zmz2zd
 TF_VAR_cluster: lkc-v7omw0
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  terraform-plan:
   name: "Terraform Infrastructure Change Management"
   runs-on: ubuntu-latest
   outputs:
    approved: ${{ steps.terraform-plan.outputs.approved }} 
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./ 
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v3
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.3.7   
         terraform_wrapper: false
     - name: Setup OPA
       uses: open-policy-agent/setup-opa@v2
       with:
        version: latest
     - name: Terraform init
       id: init
       run: terraform init 
     - name: Terraform plan
       id: plan 
       run: terraform plan -var-file="topics.tfvars" --out planfile -input=false && terraform show -json planfile > plan.json   
     - name: Run OPA Tests
       id: opa
       run: opa eval data.terraform -d opa/policies/ -i plan.json -f pretty > opa.json
     - name: Check Opa Results
       id: check 
       run: |
          echo "approved=$(jq -e '.deny | length' opa.json)" >> $GITHUB_OUTPUT
     - name: Terraform apply
       if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.check.outputs.approved == 0
       run: terraform apply -var-file="topics.tfvars" -input=false -auto-approve   
     - name: Check coverage tolerance
       if: steps.check.outputs.approved > 0 
       run: echo "::error::Opa policy check failed. Please check the policy file for more details." && exit 1
            
     
    
   